{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Scratch Script","text":"<p>Scratch script is a domain specific language that is made to compile to a scratch .sb3 file which can be imported into the scratch website.</p>"},{"location":"#example","title":"Example","text":"<p>The following is an example .scratch file that makes the cat step through the items in a list:</p> <pre><code>sprite Stage{};\n\nsprite cat{\n    script{\n        start();\n        setxy(0, 0);\n        move(3);\n        }\n    }\n    costumes{\n        \"cat.svg\"\n    }\n}\n</code></pre>"},{"location":"body/","title":"Structure of Scratch Script","text":"<p>Scratch Script is created to embody the functionality of base Scratch, so there must be some way to implement sprites.</p>"},{"location":"body/#sprites","title":"Sprites","text":"<p>This functionality is accomplished in Scratch Script by the use of the sprite keyword.</p> <pre><code>sprite Stage{}\n\nsprite cat{}\n\nsprite thing{}\n</code></pre> <p>The text that comes after <code>sprite</code> will be the name of the sprite.</p> <p>For example the sprite created on line 3 would be called 'cat'.</p> <p>If the sprite name is <code>Stage</code>, the sprite is the stage and will have all of it's functionality (including it's lack of position)</p>"},{"location":"body/#attributes-of-sprites","title":"Attributes of Sprites","text":"<p>Sprites have attributes such as their costumes or scripts.</p> <pre><code>sprite cat{\n    script{}\n    costumes{}\n}\n</code></pre>"},{"location":"body/#scripts","title":"Scripts","text":"<p>Inside of scripts, there are functions and commands that are created from top to bottom</p> <pre><code>sprite cat{\n    script{\n        start();\n        move(10);\n    }\n}\n</code></pre> <p>For more information, go to Scripts</p>"},{"location":"body/#costumes","title":"Costumes","text":"<p>Inside of the costumes attribute there is a list of file paths to images. The resulting name of the costume in the scratch website when imported is the filename without the extension.</p> <pre><code>sprite cat{\n    costumes{\n        \"cat1.svg\",\n        \"foldername/filename.svg\"\n    }\n}\n</code></pre> <p>For example, the path \"folder1/bestImage.svg\" would result in a costume named \"bestImage\".</p> <p>Currently the only file extension implemented is svg</p>"},{"location":"importing/","title":"Importing Scripts","text":"<p>Similarly to the <code>#include</code> keyword in C, the <code>import</code> keyword in Scratch Script \"runs\" the file specified \"\"linking\"\" the files together. In actuality, this process is achieved by different means in both cases.</p>"},{"location":"importing/#import","title":"Import","text":"<p>The import keyword can be used in two contexts:</p> <ol> <li> <p>Within a <code>script</code></p> </li> <li> <p>Not within a <code>script</code></p> </li> </ol>"},{"location":"importing/#importing-within-a-script","title":"Importing within a script","text":"<p>If the <code>import</code> keyword is used within the script of a sprite, the import will look for the <code>export</code> keyword within the .scratch file.</p> <p>Once it has found the <code>export</code> keyword, it will run all of the commands within it.</p> <p>To assign stacks, the original stack will \"jump\" over the import and will continue on without it.</p> main.scratch<pre><code>sprite cat {\n    script {\n        start();\n        import \"otherfile.scratch\";\n        move(3);\n    }\n}\n</code></pre> otherfile.scratch<pre><code>export {\n    move(7);\n}\n</code></pre> <p>The resulting stacks would be:</p> <p>start(); move(3);</p> <p>and...</p> <p>move(7);</p>"},{"location":"importing/#importing-outside-of-a-script","title":"Importing outside of a script","text":"<p>If the <code>import</code> keyword is used outside of the script of a sprite, the import will look for all <code>sprites</code> within the .scratch file.</p> main.scratch<pre><code>import \"otherfile.scratch\";\n\nsprite cat {\n    script {\n        start();\n        move(3);\n    }\n}\n</code></pre> otherfile.scratch<pre><code>sprite cat2 {\n    script{\n        move(7);\n    }\n}\n</code></pre> <p>The resulting Scratch project would contain both <code>cat</code> and <code>cat2</code>.</p> <p>This achieves the same thing as if you put the sprite in the base project.</p>"},{"location":"importing/#require","title":"Require","text":"<p>The require keyword is a one time import.</p> <p>If the .scratch file has not been imported yet, it imports it.</p> <p>If the .scratch file has been imported before, it does not import the file.</p> main.scratch<pre><code>sprite cat{\n    script {\n        require \"otherfile.scratch\";\n    }\n}\n</code></pre>"},{"location":"importing/#file-path","title":"File Path","text":"<p>The file in quotes for the <code>require</code> and <code>import</code> command is a relative file path, meaning you are able to put the file you want to import into a subdirectory.</p> <p>For example a directory like this:</p> <pre><code>.\n\u2514\u2500 project/\n    \u251c\u2500 main.scratch\n    \u2514\u2500 subforlder/\n        \u2514\u2500 example.scratch\n</code></pre> <p>Could have a import like this:</p> main.scratch<pre><code>import \"subfolder/example.scratch\";\n</code></pre>"},{"location":"importing/#standard-packages","title":"Standard Packages","text":"<p>Standard Packages are files that are part of compiler and are used for base functionality such as static variables.</p> <p>Importing standard packages are the exact same as importing regular .scratch files.</p> <pre><code>import \"static.scratch\";\n</code></pre> <p>For most cases however, this is done automatically.</p>"},{"location":"install/","title":"The Installation of Scratch script","text":"<p>this file will be a file to help you with the installation of scratch script</p> <pre><code>git clone https://github.com/vortech11/Comp-to-Scratch.git\n</code></pre> <p>From there you need to make sure you have python installed.</p> <pre><code>py --version\n</code></pre> <p>You can now compile .scratch files by running:</p> <pre><code>py \"Comp-to-Scratch-path/main.py\" \"fileName\"\n</code></pre> <p>This should result in an build folder being created in the directory of the .scratch file</p> <p>Ability to run with a button</p> <p>You can use vscode extensions such as \"Code Runner\" to add a button to .scratch files and make them run the command</p>"},{"location":"quirks/","title":"Quirks of the compiler","text":"<p>Because this is my first language ever written, it contains weird and unintended functionality.</p>"},{"location":"quirks/#whitespace","title":"Whitespace","text":"<p>All whitespace is allowed.</p> <pre><code>sprite cat{\n        script         [\nstart    (  )     ;\n      move () ;\n  if   (1  == 1 )  { move\n  (3)}\n]\n    }\n</code></pre> <p>It looks horrible, but it works</p>"},{"location":"quirks/#brackets","title":"Brackets","text":"<p>All types of brackets are interchangeable*</p> <p>Brackets include:</p> <ul> <li> <p>brackets: <code>[]</code></p> </li> <li> <p>curly brackets: <code>{}</code></p> </li> <li> <p>parenthesis: <code>()</code></p> </li> </ul> <pre><code>sprite cat(\n    script{\n        start(};\n        move{3);\n    ]\n}\n</code></pre>"},{"location":"quirks/#strings","title":"Strings","text":"<p>There are no strings</p> <p>What double quotes (<code>\"\"</code>) do is include everything inside of it as one token.</p> <p>This is useful for hex values</p> <pre><code>pen_setPenColorToColor(\"#ffffff\");\n</code></pre> <p>This is also important for decimal values</p> <pre><code>move(\"10.3\");\n</code></pre> <p>If you do not have double quotes with decimal or hex values, the compiler will throw an error</p>"},{"location":"quirks/#semicolons","title":"Semicolons","text":"<p>Semicolons are relatively normal except for the fact that they must come after every function and command, excluding curly brackets.</p> <p>This does not work</p> <pre><code>if (5 == 3){\n    move(10);\n};\nmove(3);\n</code></pre> <p>This does not work</p> <pre><code>if (5 == 3)(\n    move(10);\n)\nmove(3);\n</code></pre> <p>Instead it should look something like this:</p> <pre><code>if (5 == 3){\n    move(10);\n}\nmove(3);\n</code></pre> <p>...or this</p> <pre><code>if (5 == 3)(\n    move(10);\n);\nmove(3);\n</code></pre>"},{"location":"scripts/","title":"Sprite Scripts","text":"<p>The scripts of a sprite are the meat and potatoes of a project. Each function or command equates to one or more scratch blocks that gets created on compile. </p>"},{"location":"scripts/#stacking","title":"Stacking","text":"<p>Scratch blocks are able to stack on top of one another. This happens in scratch script automatically when two functions gets called after one another. </p> <p>The way one would break this stacking is by placing a block that is not able to be stacked to break up the flow.</p> <pre><code>start();\nmove(3);\nstart();\nmove(4);\n</code></pre> <p>This would equate to two stacks that both are ran when the green flag is clicked. One stack with a move by 3 and another with a move by 4.</p>"},{"location":"scripts/#opcodes","title":"Opcodes","text":"<p>A Scratch Opcode is a specific identifier for a block. In scratch script you can create any scratch block by calling the opcode as a function.</p> <pre><code>motion_movesteps(10);\n\nlooks_say(\"hi\");\n\nevent_whenflagclicked();\n</code></pre> <p>A list of all opcodes used in Scratch Script can be found here</p>"},{"location":"scripts/#aliases","title":"Aliases","text":"<p>An alias is a scratch opcode that has been renamed.</p> <p>For example: - <code>motion_movesteps()</code> has been renamed to <code>move</code> - <code>looks_say()</code> to <code>say</code> - <code>event_whenflagclicked()</code> to <code>start</code></p> <p>Both the alias and the original are allowed, but aliases are meant to be easier to remember.</p> <p>A good example of this is <code>control_if</code> as it is renamed to <code>if</code> to make if statements work</p> <pre><code>move(10);\n\nsay(\"hi\");\n\nstart();\n\nif(10 == 10){\n    move(10);\n}\n</code></pre> <p>A list of all aliases can be found here</p>"},{"location":"scripts/#data","title":"Data","text":"<p>Currently there are three types of data within Scratch Script: the var data type, list data type, and static data type.</p>"},{"location":"scripts/#vars","title":"Vars","text":"<p>The var data type is the built-in scratch variable data type. Vars are created on compile time, or in other words, cannot be created after it is compiled.</p> <p>To create the var data type you can run the following:</p> <pre><code>var varName;\n</code></pre> <p>This will initiate the variable (<code>varName</code>) with the value 0. To specify a different value the following can be ran:</p> <pre><code>var varName = 10;\n</code></pre> <p>You can set the value of the variable by using the <code>=</code> keyword.</p> <pre><code>varName = 10;\n</code></pre> <p>You can then apply operations with the variable by using the <code>+=</code> or <code>++</code> keyword.</p> <pre><code>varName += 10;\nvarName++;\n</code></pre> <p>These operations change the value of the variable (varName) by a value (10 or 1).</p> <p>To get the value of a var, you can use the name of the variable in an expression.</p> <pre><code>var i = 3;\nmove(i);\nmove(i + 2);\n</code></pre> <p>In action this could look like:</p> <pre><code>var i;\ni = 10;\ni += 2;\ni++;\nmove(i);\n</code></pre>"},{"location":"scripts/#lists","title":"Lists","text":"<p>By using the list keyword, a Scratch list is created similarly to a variable. It is created on compile time and cannot be created or deleted while the Scratch Project is running.</p> <p>To create a list, use the list keyword:</p> <pre><code>list listName;\nlist listName = [];\n</code></pre> <p>Both of these scripts creates an empty list called listName that looks like this: []. I don't know which one is better so I will keep both. </p> <p>If you want to initiate values or set them, you can simply use commas to deliminate different values at indexes.</p> <pre><code>list listName = [10, 4, 6, 7, 2];\nlistName = [3, 1];\n</code></pre> <p>To change a specific value at an index, you are able to do list indexing by doing the folloing:</p> <pre><code>list listName = [10, 3];\nlistName[2] = 5;\n</code></pre> <p>Base Scratch is 1st indexed compared to most programming languages</p> <p>In python: <pre><code>listName = [10, 20]\nlistName[0] = 30\nlistName[1] = 40\n#listName [30, 40]\n</code></pre></p> <p>In Scratch Script: <pre><code>list listName = [10, 20];\nlistName[1] = 30;\nlistName[2] = 40;\n#listName [30, 40]\n</code></pre></p> <p>Attempting to change or get the 0th item does nothing.</p> <p>You are currently not able to change the value at an index by a value</p> <p>This does not work:</p> <pre><code>list listName = [10];\nlistName[1] += 1;\n</code></pre> <p>To get the value at an index you can index through it as if you were to modify it, but within an expression.</p> <pre><code>list listName = [10];\nmove(listName[1]);\n</code></pre>"},{"location":"scripts/#static-vars","title":"Static Vars","text":"<p>Similarly to the C programming language, static vars are accessable in all scopes (within the same sprite). The reference to \"static variables\" is a combination of static variables and pointers in c as static vars in Scratch Script can be deleted/freed.</p> <p>Static vars are created at runtime and can be deleted, making them different from normal Scratch variables</p> <p>Static vars, behind the hood, use the <code>import</code>/<code>require</code> keyword to add to a Scratch Script project</p> <p>To learn more about the <code>import</code> and <code>require</code> keywords, go to the Importing page.</p> <p>To make a static var, use the static keyword.</p> <pre><code>static varName;\nstatic varName = 10;\n</code></pre> <p>You can modify and asign values.</p> <pre><code>static varName;\nvarName = 10;\nvarName += 3;\nvarName++;\n</code></pre> <p>To get the value of a static var</p> <pre><code>static varName = 3;\nmove(varName);\n</code></pre> <p>You can delete a static var by using the <code>del</code> keyword.</p> <pre><code>static varName = 3;\nmove(varName);\ndel varName;\n</code></pre> <p>Deleting static variables is important</p> <p>If you do not delete a static variable, errors can pop up in the console.</p> <pre><code>start();\nloop(3){\n    static distance = 10;\n    move(distance);\n}\n\n# Variable `distance` already exists\n</code></pre>"},{"location":"scripts/#functions","title":"Functions","text":"<p>Functions are part of base scratch and can be implamented by using the <code>func</code> keyword.</p> <pre><code>func funcName(){\n\n}\n</code></pre> <p>A function can have inputs parameters.</p> <p>Function parameters can be of type:</p> <ul> <li> <p>text (numbers or strings)</p> </li> <li> <p>bool (boolean expressions)</p> </li> </ul> <p>Functions can have as many inputs as you want and are deliminated by commas.</p> <pre><code>func funcName(input1: text, input2: bool){\n\n}\n</code></pre> <p><code>input1</code> is an input to funcName and is of type text.</p> <p><code>input2</code> is an input to funcName and is of type bool.</p> <p>You can then place blocks within the function. Those blocks can also call inputs.</p> <pre><code>func funcName(input1: text, input2: bool){\n    if (input2){\n        move(input1);\n    }\n}\n</code></pre> <p>Any static variables created in functions are deleted at the end of the function.</p> <pre><code>func funcName(){\n    static varName = 3;\n    move(varName);\n}\n\n# Var `varName` no longer exist.\n</code></pre> <p>Experimental: Function Returns</p> <p>Functions in base scratch are not able to return values.</p> <p>However, by creating a static global variable, running the function, setting the value within the function, getting the value of the variable outside of the function, and deleting the static variable, it is possible to make function returns.</p> <p>This technology is still in production and does not work with bools or multiple return values and may be buggy.</p> <pre><code>func add(num1: text, num2: text){\n    return (num1 + num2);\n}\n\nmove(add(10, 4));\n</code></pre>"}]}